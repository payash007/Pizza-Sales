Queries:

-- Retrieve the total number of orders placed.

select COUNT(*) AS Total_Orders from orders;

-- Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS Total_Revenue
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id

-- Identify the highest-priced pizza.

SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
WHERE
    pizzas.price = (SELECT 
            MAX(price)
        FROM
            pizzas);

-- Identify the most common pizza size ordered.

SELECT 
    pizzas.size, COUNT(*) AS total_pizza_ordered
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY total_pizza_ordered DESC
LIMIT 1;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT 
    p.name, SUM(c.quantity) AS Most_Ordered_Quantity
FROM
    pizza_types AS p
        JOIN
    pizzas AS b ON p.pizza_type_id = b.pizza_type_id
        JOIN
    order_details AS c ON c.pizza_id = b.pizza_id
GROUP BY p.name
ORDER BY Most_Ordered_Quantity DESC
LIMIT 5;

-- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    p.category, SUM(o.quantity) AS total_quantity
FROM
    pizza_types AS p
        JOIN
    pizzas AS b ON b.pizza_type_id = p.pizza_type_id
        JOIN
    order_details AS o ON o.pizza_id = b.pizza_id
GROUP BY p.category
ORDER BY total_quantity DESC

-- Determine the distribution of orders by hour of the day.

select hour(order_time) as hour,count(*) as order_count from orders
group by hour
order by hour asc     -- insights: evening and afternoon are the busiest hours

-- Join relevant tables to find the category-wise distribution of pizzas.

SELECT category,count(name) from pizza_types
group by category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    ROUND(AVG(Total_Quantity), 0) AS Avg_Pizza_Ordered_Per_day
FROM
    (SELECT 
        orders.order_date,
            SUM(order_details.quantity) AS Total_Quantity
    FROM
        order_details
    JOIN orders ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS avg_data


-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    p.name, ROUND(SUM(o.quantity * b.price), 2) AS revenue
FROM
    pizza_types AS p
        JOIN
    pizzas AS b ON p.pizza_type_id = b.pizza_type_id
        JOIN
    order_details AS o ON o.pizza_id = b.pizza_id
GROUP BY p.name
ORDER BY revenue DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.

SELECT 
    p.category,
    ROUND((ROUND(SUM(o.quantity * b.price), 2) / (SELECT 
                    ROUND(SUM(order_details.quantity * pizzas.price),
                                2) AS Total_Revenue
                FROM
                    order_details
                        JOIN
                    pizzas ON pizzas.pizza_id = order_details.pizza_id)) * 100,
            2) AS revenue
FROM
    pizza_types AS p
        JOIN
    pizzas AS b ON p.pizza_type_id = b.pizza_type_id
        JOIN
    order_details AS o ON o.pizza_id = b.pizza_id
GROUP BY p.category
ORDER BY revenue DESC

-- Analyze the cumulative revenue generated over time.

SELECT order_date,
sum(revenue) over (order by order_date) as cum_revenue from
(select orders.order_date,Round(sum(order_details.quantity*pizzas.price),2) as revenue from orders
join order_details on orders.order_id=order_details.order_id
join pizzas on order_details.pizza_id=pizzas.pizza_id
group by orders.order_date) as sales;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select category, name, revenue, ranka
from
(SELECT category, name, revenue,

RANK() OVER(partition by category  order by revenue)  as ranka

from

(select p.category,p.name, Round(sum(o.quantity*b.price),2) as revenue from pizza_types as p
join pizzas as b on p.pizza_type_id=b.pizza_type_id
join order_details as o on o.pizza_id=b.pizza_id
group by p.name,p.category) as sales) as rank_data
where ranka<=3;



